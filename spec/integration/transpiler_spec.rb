# frozen_string_literal: true

require 'spec_helper'
require 'bolt/pal/yaml_plan/transpiler'
require 'bolt_spec/files'
require 'bolt_spec/integration'

describe "transpiling YAML plans" do
  include BoltSpec::Files
  include BoltSpec::Integration

  after(:each) { Puppet.settings.send(:clear_everything_for_tests) }

  let(:modulepath) { fixtures_path('modules') }
  let(:yaml_path) { File.join(modulepath, 'yaml', 'plans') }
  let(:plan_path) { File.join(yaml_path, 'conversion.yaml') }
  let(:invalid_plan_path) { File.join(yaml_path, 'invalid.yaml') }
  let(:output_plan) { <<~PLAN }
  # A yaml plan for testing plan conversion
  # WARNING: This is an autogenerated plan. It might not behave as expected.
  # @param targets The targets to run the plan on
  # @param message A string to print
  plan yaml::conversion(
    TargetSpec $targets,
    String $message = 'hello world'
  ) {
    $sample = run_task('sample', $targets, {'message' => $message})
    apply_prep($targets)
    apply($targets) {
      package { 'nginx': }
      ->
      file { '/etc/nginx/html/index.html':
        content => "Hello world!",
      }
      ->
      service { 'nginx': }
    }
    $eval_output = with() || {
      # TODO: Can blocks handle comments?
      $list = $sample.targets.map |$t| {
        notice($t)
        $t
      }
      $list.map |$l| {$l.name}
    }

    return $eval_output
  }
  PLAN

  it 'transpiles a YAML plan from a path' do
    expect {
      run_cli(%W[plan convert #{plan_path}])
    }.to output(output_plan).to_stdout
  end

  it 'transpiles a YAML plan from a plan name' do
    expect {
      run_cli(%W[plan convert yaml::conversion -m #{modulepath}])
    }.to output(output_plan).to_stdout
  end

  it 'plan show output is the same for the original plan and converted plan', ssh: true do
    Dir.mktmpdir do |tmpdir|
      FileUtils.mkdir_p(File.join(tmpdir, 'plans'))
      File.write(File.join(tmpdir, 'plans', 'conversion.pp'), output_plan)
      File.write(File.join(tmpdir, 'bolt-project.yaml'), { 'name' => 'yaml' }.to_yaml)
      puppet_show = JSON.parse(run_cli(%W[plan show yaml::conversion --project #{tmpdir}]))
      yaml_show = JSON.parse(run_cli(%W[plan show yaml::conversion -m #{modulepath}]))

      # Don't compare moduledirs
      [puppet_show, yaml_show].each do |plan|
        plan.delete_if { |k, _v| k == 'module_dir' }
      end

      # Remove the conversion warning
      suffix = "\nWARNING: This is an autogenerated plan. It might not behave as expected."
      puppet_show['description'].delete_suffix!(suffix)
      puppet_show['docstring'].delete_suffix!(suffix)

      # Account for string quoting
      yaml_show['parameters']['message']['default_value'] = "'#{yaml_show['parameters']['message']['default_value']}'"

      expect(puppet_show).to eq(yaml_show)
    end
  end

  it 'errors when loading the plan raises an error' do
    expect { run_cli(%W[plan convert #{invalid_plan_path}]) }
      .to raise_error(Bolt::Error, /did not find expected '-' indicator/)
  end
end
